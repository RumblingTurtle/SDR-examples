close all; clear; %clear classes;
clc; 

%Create user interfase object for SRD
SRD = SRDuserinterface();


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Dynamics

SymbolicEngine = SRD.DeriveEquationsForSimulation('UseCasadi', true, ...
    'ToLinearize', false, ...                    %needed if you want to use LQR and other linearization-based methods
    'ToRecreateSymbolicEngine', true, ...        %set false if you already have a symbolic engine saved and you want to load it (doesn't work with Casadi)
    'dissipation_coefficients', [], ...           %provide non-default dissipation (viscous friction) coefficients
    'ToSimplify', false, ...                      %if you don't use Casadi, set true, unless your robot is huge
    'ToUseParallelizedSimplification', false, ... %if you don't use Casadi, set true to automatically palallelize your symbolic computations
    'NumberOfWorkers', 8, ...                     %if you don't use Casadi, set how many workers you want to palallelize your symbolic computations
    'ToOptimizeFunctions', true, ...              %if you don't use Casadi, set false to skip function optimization (will result in very slow simulation)
    'ToSaveSymbolicEngine', false);               %if you use Casadi, set false to ovoid errors related to MATLAB trying to serialize Casadi objects


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Linearization

SRD_generate_dynamics_linearization(...
    'SymbolicEngine', SymbolicEngine, ...
    'Symbolic_ToSimplify', true, ...
    'Symbolic_UseParallelizedSimplification', false, ...
    'Symbolic_ToSimplify', true, ...
    'Symbolic_ToSimplify', true, ...
    'Symbolic_ToSimplify', true, ...
    'Symbolic_ToSimplify', true, ...
    'Symbolic_ToSimplify', true, ...
    'Symbolic_ToSimplify', true)



Parser.addOptional('Symbolic_ToSimplify', true);
Parser.addOptional('Symbolic_UseParallelizedSimplification', false);
Parser.addOptional('Symbolic_ToOptimizeFunctions', true);

Parser.addOptional('Casadi_cfile_name', 'g_dynamics');

Parser.addOptional('FunctionName_A', 'g_linearization_A');
Parser.addOptional('FunctionName_B', 'g_linearization_B');
Parser.addOptional('FunctionName_c', 'g_linearization_c');

Parser.addOptional('Path', []);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Constraints

%%%%%%%%%%%%
%construct constraint
constraint = SymbolicEngine.GeometryArray{3}.Link.AbsoluteFollower(1);
%%%%%%%%%

description = SRD_generate_second_derivative_Jacobians('SymbolicEngine', SymbolicEngine, ...
    'Task',                                   constraint, ...
    'Casadi_cfile_name',                     'g_Constraints', ...
    'Symbolic_ToSimplify',                    true, ...
    'Symbolic_UseParallelizedSimplification', false, ...
    'Symbolic_ToOptimizeFunctions',           true, ...
    'FunctionName_Task',                     'g_Constraint', ...
    'FunctionName_TaskJacobian',             'g_Constraint_Jacobian', ...
    'FunctionName_TaskJacobian_derivative',  'g_Constraint_Jacobian_derivative', ...
    'Path',                                  'Constraints_folder/');


Handler_Constraints_Model = SRD_get_handler__Constraints_model('description', description, ...
    'dof_robot', SymbolicEngine.dof, ...
    'dof_Constraint', length(constraint));
SRD_save(Handler_Constraints_Model, 'Handler_Constraints_Model');

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Inverse kinematics

%%%%%%%%%%%%
%construct inverse kinematics task
rC = SymbolicEngine.GetCoM;
Task = [rC(1); rC(3); constraint]; 
%%%%%%%%%

description = SRD_generate_second_derivative_Jacobians('SymbolicEngine', SymbolicEngine, ...
    'Task', Task, ...
    'Casadi_cfile_name', 'g_InverseKinematics', ...
    'Symbolic_ToSimplify', true, ...
    'Symbolic_UseParallelizedSimplification', false, ...
    'Symbolic_ToOptimizeFunctions', true, ...
    'FunctionName_Task', 'g_InverseKinematics_Task', ...
    'FunctionName_TaskJacobian', 'g_InverseKinematics_TaskJacobian', ...
    'FunctionName_TaskJacobian_derivative', 'g_InverseKinematics_TaskJacobian_derivative', ...
    'Path', 'IK_folder/');

Handler_IK_Model = SRD_get_handler__IK_model('description', description, ...
    'dof_robot', SymbolicEngine.dof, ...
    'dof_Task', length(Task));
SRD_save(Handler_IK_Model, 'Handler_IK_Model');



